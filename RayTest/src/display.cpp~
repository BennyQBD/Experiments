#include "display.h"
#include <iostream>

Display::Display(unsigned int width, unsigned int height, double scale, const std::string& title) :
	m_raster(width, height)
{
	SDL_Init(SDL_INIT_EVERYTHING);

	m_window = SDL_CreateWindow(title.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, (int)(width*scale), (int)(height*scale), 0);
	m_renderer = SDL_CreateRenderer(m_window, -1, SDL_RENDERER_ACCELERATED);
	m_image = SDL_CreateTexture(m_renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, (int)width, (int)height);
	
	m_isClosed = false;
	m_width = width;
	m_height = height;
	m_input = Input(m_downKeys);
	
	for(unsigned int i = 0; i < NUM_KEYS; i++)
		m_downKeys[i] = false;
}

Display::~Display()
{
	SDL_DestroyWindow(m_window);
	SDL_DestroyRenderer(m_renderer);
	SDL_Quit();
	if(m_pixels) delete m_pixels;
}

bool Display::IsClosed()
{
	return m_isClosed;
}

void Display::Update()
{
	SDL_Event e;
	
	while(SDL_PollEvent(&e))
	{
		if(e.type == SDL_QUIT)
			m_isClosed = true;
			
		switch( e.type ){
			case SDL_KEYDOWN:
				m_downKeys[e.key.keysym.scancode] = true;
				break;

			case SDL_KEYUP:
				m_downKeys[e.key.keysym.scancode] = false;
				break;

			default:
				break;
		}
	}
	
	SDL_UpdateTexture(m_image, NULL, m_raster.GetPixels(), (int)(m_width * sizeof(int)));
	SDL_RenderCopy(m_renderer, m_image, NULL, NULL);
	SDL_RenderPresent(m_renderer);
}

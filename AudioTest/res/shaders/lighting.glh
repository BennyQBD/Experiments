/*
 * Copyright (C) 2014 Benny Bobaganoosh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct BaseLight
{
    vec3 color;
    float intensity;
};

struct Attenuation
{
    float constant;
    float linear;
    float exponent;
};

struct DirectionalLight
{
    BaseLight base;
    vec3 direction;
};

struct PointLight
{
    BaseLight base;
    Attenuation atten;
    vec3 position;
    float range;
};

struct SpotLight
{
    PointLight pointLight;
    vec3 direction;
    float cutoff;
};

vec4 CalcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPos, 
               float specularIntensity, float specularPower, vec3 eyePos)
{
    float diffuseFactor = clamp(dot(normal, -direction), 0.0, 1.0);
    
    vec4 diffuseColor = vec4(0,0,0,0);
    vec4 specularColor = vec4(0,0,0,0);
    
    diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
        
    vec3 directionToEye = normalize(eyePos - worldPos);
    vec3 reflectDirection = normalize(reflect(direction, normal));
    
    float specularFactor = dot(directionToEye, reflectDirection);
    specularFactor = clamp(pow(specularFactor, specularPower), 0.0, 1.0);
        
    if(specularFactor > 0)
    {
        specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
    }
    
    return diffuseColor + specularColor;
}

vec4 CalcPointLight(PointLight pointLight, vec3 normal, vec3 worldPos,
                    float specularIntensity, float specularPower, vec3 eyePos)
{
    vec3 lightDirection = worldPos - pointLight.position;
    float distanceToPoint = length(lightDirection);
    
    if(distanceToPoint > pointLight.range)
        return vec4(0,0,0,0);
    
    lightDirection = normalize(lightDirection);
    
    vec4 color = CalcLight(pointLight.base, lightDirection, normal, worldPos,
                           specularIntensity, specularPower, eyePos);
    
    float attenuation = pointLight.atten.constant +
                         pointLight.atten.linear * distanceToPoint +
                         pointLight.atten.exponent * distanceToPoint * distanceToPoint +
                         0.0001;
                         
    return color / attenuation;
}
